version: '3.8'

services:
  backend:
    build:
      context: ..
      dockerfile: deploy/Dockerfile.backend
    container_name: rag-backend
    ports:
      - "8000:8000"
    environment:
      - GROQ_API_KEY=${GROQ_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LLM_PROVIDER=${LLM_PROVIDER:-groq}
      - LLM_MODEL=${LLM_MODEL:-llama3-8b-8192}
      - VECTOR_STORE_PATH=/app/data/index.faiss
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-sentence-transformers/all-MiniLM-L6-v2}
      - TOP_K=${TOP_K:-5}
      - CONTEXT_BUDGET=${CONTEXT_BUDGET:-2000}
      - TIMEOUT_SEC=${TIMEOUT_SEC:-30}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - rag_data:/app/data
    networks:
      - rag-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  frontend:
    build:
      context: ..
      dockerfile: deploy/Dockerfile.frontend
    container_name: rag-frontend
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - rag-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

networks:
  rag-network:
    driver: bridge

volumes:
  rag_data:
    driver: local
